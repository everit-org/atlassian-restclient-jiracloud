/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.everit.atlassian.restclient.jiracloud.v3.model.GetDateFieldResponse;

/**
 * GetSchedulingResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:41.549+02:00[Europe/Prague]")
public class GetSchedulingResponse {
  /**
   * The dependencies for the plan. This is \&quot;Sequential\&quot; or \&quot;Concurrent\&quot;.
   */
  public enum DependenciesEnum {
    SEQUENTIAL("Sequential"),
    
    CONCURRENT("Concurrent");

    private String value;

    DependenciesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DependenciesEnum fromValue(String value) {
      for (DependenciesEnum b : DependenciesEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("dependencies")
  private DependenciesEnum dependencies;

  @JsonProperty("endDate")
  private GetDateFieldResponse endDate;

  /**
   * The estimation unit for the plan. This is \&quot;StoryPoints\&quot;, \&quot;Days\&quot; or \&quot;Hours\&quot;.
   */
  public enum EstimationEnum {
    STORYPOINTS("StoryPoints"),
    
    DAYS("Days"),
    
    HOURS("Hours");

    private String value;

    EstimationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EstimationEnum fromValue(String value) {
      for (EstimationEnum b : EstimationEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("estimation")
  private EstimationEnum estimation;

  /**
   * The inferred dates for the plan. This is \&quot;None\&quot;, \&quot;SprintDates\&quot; or \&quot;ReleaseDates\&quot;.
   */
  public enum InferredDatesEnum {
    NONE("None"),
    
    SPRINTDATES("SprintDates"),
    
    RELEASEDATES("ReleaseDates");

    private String value;

    InferredDatesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InferredDatesEnum fromValue(String value) {
      for (InferredDatesEnum b : InferredDatesEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("inferredDates")
  private InferredDatesEnum inferredDates;

  @JsonProperty("startDate")
  private GetDateFieldResponse startDate;

  public GetSchedulingResponse dependencies(DependenciesEnum dependencies) {
    this.dependencies = dependencies;
    return this;
  }

   /**
   * The dependencies for the plan. This is \&quot;Sequential\&quot; or \&quot;Concurrent\&quot;.
   * @return dependencies
  **/
  @ApiModelProperty(required = true, value = "The dependencies for the plan. This is \"Sequential\" or \"Concurrent\".")
  public DependenciesEnum getDependencies() {
    return dependencies;
  }

  public void setDependencies(DependenciesEnum dependencies) {
    this.dependencies = dependencies;
  }

  public GetSchedulingResponse endDate(GetDateFieldResponse endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * The end date field for the plan.
   * @return endDate
  **/
  @ApiModelProperty(required = true, value = "The end date field for the plan.")
  public GetDateFieldResponse getEndDate() {
    return endDate;
  }

  public void setEndDate(GetDateFieldResponse endDate) {
    this.endDate = endDate;
  }

  public GetSchedulingResponse estimation(EstimationEnum estimation) {
    this.estimation = estimation;
    return this;
  }

   /**
   * The estimation unit for the plan. This is \&quot;StoryPoints\&quot;, \&quot;Days\&quot; or \&quot;Hours\&quot;.
   * @return estimation
  **/
  @ApiModelProperty(required = true, value = "The estimation unit for the plan. This is \"StoryPoints\", \"Days\" or \"Hours\".")
  public EstimationEnum getEstimation() {
    return estimation;
  }

  public void setEstimation(EstimationEnum estimation) {
    this.estimation = estimation;
  }

  public GetSchedulingResponse inferredDates(InferredDatesEnum inferredDates) {
    this.inferredDates = inferredDates;
    return this;
  }

   /**
   * The inferred dates for the plan. This is \&quot;None\&quot;, \&quot;SprintDates\&quot; or \&quot;ReleaseDates\&quot;.
   * @return inferredDates
  **/
  @ApiModelProperty(required = true, value = "The inferred dates for the plan. This is \"None\", \"SprintDates\" or \"ReleaseDates\".")
  public InferredDatesEnum getInferredDates() {
    return inferredDates;
  }

  public void setInferredDates(InferredDatesEnum inferredDates) {
    this.inferredDates = inferredDates;
  }

  public GetSchedulingResponse startDate(GetDateFieldResponse startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date field for the plan.
   * @return startDate
  **/
  @ApiModelProperty(required = true, value = "The start date field for the plan.")
  public GetDateFieldResponse getStartDate() {
    return startDate;
  }

  public void setStartDate(GetDateFieldResponse startDate) {
    this.startDate = startDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSchedulingResponse getSchedulingResponse = (GetSchedulingResponse) o;
    return Objects.equals(this.dependencies, getSchedulingResponse.dependencies) &&
        Objects.equals(this.endDate, getSchedulingResponse.endDate) &&
        Objects.equals(this.estimation, getSchedulingResponse.estimation) &&
        Objects.equals(this.inferredDates, getSchedulingResponse.inferredDates) &&
        Objects.equals(this.startDate, getSchedulingResponse.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencies, endDate, estimation, inferredDates, startDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSchedulingResponse {\n");
    
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    estimation: ").append(toIndentedString(estimation)).append("\n");
    sb.append("    inferredDates: ").append(toIndentedString(inferredDates)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

