/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.everit.atlassian.restclient.jiracloud.v3.model.AvailableWorkflowTriggerTypes;

/**
 * The trigger rules available.
 */
@ApiModel(description = "The trigger rules available.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-13T15:26:43.813+01:00[Europe/Prague]")
public class AvailableWorkflowTriggers {
  @JsonProperty("availableTypes")
  private List<AvailableWorkflowTriggerTypes> availableTypes = new ArrayList<>();

  @JsonProperty("ruleKey")
  private String ruleKey;

  public AvailableWorkflowTriggers availableTypes(List<AvailableWorkflowTriggerTypes> availableTypes) {
    this.availableTypes = availableTypes;
    return this;
  }

  public AvailableWorkflowTriggers addAvailableTypesItem(AvailableWorkflowTriggerTypes availableTypesItem) {
    this.availableTypes.add(availableTypesItem);
    return this;
  }

   /**
   * The list of available trigger types.
   * @return availableTypes
  **/
  @ApiModelProperty(required = true, value = "The list of available trigger types.")
  public List<AvailableWorkflowTriggerTypes> getAvailableTypes() {
    return availableTypes;
  }

  public void setAvailableTypes(List<AvailableWorkflowTriggerTypes> availableTypes) {
    this.availableTypes = availableTypes;
  }

  public AvailableWorkflowTriggers ruleKey(String ruleKey) {
    this.ruleKey = ruleKey;
    return this;
  }

   /**
   * The rule key of the rule.
   * @return ruleKey
  **/
  @ApiModelProperty(required = true, value = "The rule key of the rule.")
  public String getRuleKey() {
    return ruleKey;
  }

  public void setRuleKey(String ruleKey) {
    this.ruleKey = ruleKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableWorkflowTriggers availableWorkflowTriggers = (AvailableWorkflowTriggers) o;
    return Objects.equals(this.availableTypes, availableWorkflowTriggers.availableTypes) &&
        Objects.equals(this.ruleKey, availableWorkflowTriggers.ruleKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableTypes, ruleKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableWorkflowTriggers {\n");
    
    sb.append("    availableTypes: ").append(toIndentedString(availableTypes)).append("\n");
    sb.append("    ruleKey: ").append(toIndentedString(ruleKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

