/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * BulkFetchIssueRequestBean
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:41.549+02:00[Europe/Prague]")
public class BulkFetchIssueRequestBean {
  @JsonProperty("expand")
  private List<String> expand = new ArrayList<>();

  @JsonProperty("fields")
  private List<String> fields = new ArrayList<>();

  @JsonProperty("fieldsByKeys")
  private Boolean fieldsByKeys;

  @JsonProperty("issueIdsOrKeys")
  private List<String> issueIdsOrKeys = new ArrayList<>();

  @JsonProperty("properties")
  private List<String> properties = new ArrayList<>();

  public BulkFetchIssueRequestBean expand(List<String> expand) {
    this.expand = expand;
    return this;
  }

  public BulkFetchIssueRequestBean addExpandItem(String expandItem) {
    if (this.expand == null) {
      this.expand = new ArrayList<>();
    }
    this.expand.add(expandItem);
    return this;
  }

   /**
   * Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where &#x60;expand&#x60; is specified, &#x60;expand&#x60; is defined as a list of values. The expand options are:   *  &#x60;renderedFields&#x60; Returns field values rendered in HTML format.  *  &#x60;names&#x60; Returns the display name of each field.  *  &#x60;schema&#x60; Returns the schema describing a field type.  *  &#x60;transitions&#x60; Returns all possible transitions for the issue.  *  &#x60;operations&#x60; Returns all possible operations for the issue.  *  &#x60;editmeta&#x60; Returns information about how each field can be edited.  *  &#x60;changelog&#x60; Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  &#x60;versionedRepresentations&#x60; Instead of &#x60;fields&#x60;, returns &#x60;versionedRepresentations&#x60; a JSON array containing each version of a field&#39;s value, with the highest numbered item representing the most recent version.
   * @return expand
  **/
  @ApiModelProperty(value = "Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `operations` Returns all possible operations for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.")
  public List<String> getExpand() {
    return expand;
  }

  public void setExpand(List<String> expand) {
    this.expand = expand;
  }

  public BulkFetchIssueRequestBean fields(List<String> fields) {
    this.fields = fields;
    return this;
  }

  public BulkFetchIssueRequestBean addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;*all&#x60; Returns all fields.  *  &#x60;*navigable&#x60; Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  The default is &#x60;*navigable&#x60;.  Examples:   *  &#x60;summary,comment&#x60; Returns the summary and comments fields only.  *  &#x60;-description&#x60; Returns all navigable (default) fields except description.  *  &#x60;*all,-comment&#x60; Returns all fields except comments.  Multiple &#x60;fields&#x60; parameters can be included in a request.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
   * @return fields
  **/
  @ApiModelProperty(value = "A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  The default is `*navigable`.  Examples:   *  `summary,comment` Returns the summary and comments fields only.  *  `-description` Returns all navigable (default) fields except description.  *  `*all,-comment` Returns all fields except comments.  Multiple `fields` parameters can be included in a request.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.")
  public List<String> getFields() {
    return fields;
  }

  public void setFields(List<String> fields) {
    this.fields = fields;
  }

  public BulkFetchIssueRequestBean fieldsByKeys(Boolean fieldsByKeys) {
    this.fieldsByKeys = fieldsByKeys;
    return this;
  }

   /**
   * Reference fields by their key (rather than ID). The default is &#x60;false&#x60;.
   * @return fieldsByKeys
  **/
  @ApiModelProperty(value = "Reference fields by their key (rather than ID). The default is `false`.")
  public Boolean getFieldsByKeys() {
    return fieldsByKeys;
  }

  public void setFieldsByKeys(Boolean fieldsByKeys) {
    this.fieldsByKeys = fieldsByKeys;
  }

  public BulkFetchIssueRequestBean issueIdsOrKeys(List<String> issueIdsOrKeys) {
    this.issueIdsOrKeys = issueIdsOrKeys;
    return this;
  }

  public BulkFetchIssueRequestBean addIssueIdsOrKeysItem(String issueIdsOrKeysItem) {
    this.issueIdsOrKeys.add(issueIdsOrKeysItem);
    return this;
  }

   /**
   * An array of issue IDs or issue keys to fetch. You can mix issue IDs and keys in the same query.
   * @return issueIdsOrKeys
  **/
  @ApiModelProperty(required = true, value = "An array of issue IDs or issue keys to fetch. You can mix issue IDs and keys in the same query.")
  public List<String> getIssueIdsOrKeys() {
    return issueIdsOrKeys;
  }

  public void setIssueIdsOrKeys(List<String> issueIdsOrKeys) {
    this.issueIdsOrKeys = issueIdsOrKeys;
  }

  public BulkFetchIssueRequestBean properties(List<String> properties) {
    this.properties = properties;
    return this;
  }

  public BulkFetchIssueRequestBean addPropertiesItem(String propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * A list of issue property keys of issue properties to be included in the results. A maximum of 5 issue property keys can be specified.
   * @return properties
  **/
  @ApiModelProperty(value = "A list of issue property keys of issue properties to be included in the results. A maximum of 5 issue property keys can be specified.")
  public List<String> getProperties() {
    return properties;
  }

  public void setProperties(List<String> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkFetchIssueRequestBean bulkFetchIssueRequestBean = (BulkFetchIssueRequestBean) o;
    return Objects.equals(this.expand, bulkFetchIssueRequestBean.expand) &&
        Objects.equals(this.fields, bulkFetchIssueRequestBean.fields) &&
        Objects.equals(this.fieldsByKeys, bulkFetchIssueRequestBean.fieldsByKeys) &&
        Objects.equals(this.issueIdsOrKeys, bulkFetchIssueRequestBean.issueIdsOrKeys) &&
        Objects.equals(this.properties, bulkFetchIssueRequestBean.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expand, fields, fieldsByKeys, issueIdsOrKeys, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkFetchIssueRequestBean {\n");
    
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    fieldsByKeys: ").append(toIndentedString(fieldsByKeys)).append("\n");
    sb.append("    issueIdsOrKeys: ").append(toIndentedString(issueIdsOrKeys)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

