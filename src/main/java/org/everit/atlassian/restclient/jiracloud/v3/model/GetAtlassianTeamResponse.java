/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * GetAtlassianTeamResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:41.549+02:00[Europe/Prague]")
public class GetAtlassianTeamResponse {
  @JsonProperty("capacity")
  private Double capacity;

  @JsonProperty("id")
  private String id;

  @JsonProperty("issueSourceId")
  private Long issueSourceId;

  /**
   * The planning style for the Atlassian team. This is \&quot;Scrum\&quot; or \&quot;Kanban\&quot;.
   */
  public enum PlanningStyleEnum {
    SCRUM("Scrum"),
    
    KANBAN("Kanban");

    private String value;

    PlanningStyleEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlanningStyleEnum fromValue(String value) {
      for (PlanningStyleEnum b : PlanningStyleEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("planningStyle")
  private PlanningStyleEnum planningStyle;

  @JsonProperty("sprintLength")
  private Long sprintLength;

  public GetAtlassianTeamResponse capacity(Double capacity) {
    this.capacity = capacity;
    return this;
  }

   /**
   * The capacity for the Atlassian team.
   * @return capacity
  **/
  @ApiModelProperty(value = "The capacity for the Atlassian team.")
  public Double getCapacity() {
    return capacity;
  }

  public void setCapacity(Double capacity) {
    this.capacity = capacity;
  }

  public GetAtlassianTeamResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The Atlassian team ID.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The Atlassian team ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public GetAtlassianTeamResponse issueSourceId(Long issueSourceId) {
    this.issueSourceId = issueSourceId;
    return this;
  }

   /**
   * The ID of the issue source for the Atlassian team.
   * @return issueSourceId
  **/
  @ApiModelProperty(value = "The ID of the issue source for the Atlassian team.")
  public Long getIssueSourceId() {
    return issueSourceId;
  }

  public void setIssueSourceId(Long issueSourceId) {
    this.issueSourceId = issueSourceId;
  }

  public GetAtlassianTeamResponse planningStyle(PlanningStyleEnum planningStyle) {
    this.planningStyle = planningStyle;
    return this;
  }

   /**
   * The planning style for the Atlassian team. This is \&quot;Scrum\&quot; or \&quot;Kanban\&quot;.
   * @return planningStyle
  **/
  @ApiModelProperty(required = true, value = "The planning style for the Atlassian team. This is \"Scrum\" or \"Kanban\".")
  public PlanningStyleEnum getPlanningStyle() {
    return planningStyle;
  }

  public void setPlanningStyle(PlanningStyleEnum planningStyle) {
    this.planningStyle = planningStyle;
  }

  public GetAtlassianTeamResponse sprintLength(Long sprintLength) {
    this.sprintLength = sprintLength;
    return this;
  }

   /**
   * The sprint length for the Atlassian team.
   * @return sprintLength
  **/
  @ApiModelProperty(value = "The sprint length for the Atlassian team.")
  public Long getSprintLength() {
    return sprintLength;
  }

  public void setSprintLength(Long sprintLength) {
    this.sprintLength = sprintLength;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAtlassianTeamResponse getAtlassianTeamResponse = (GetAtlassianTeamResponse) o;
    return Objects.equals(this.capacity, getAtlassianTeamResponse.capacity) &&
        Objects.equals(this.id, getAtlassianTeamResponse.id) &&
        Objects.equals(this.issueSourceId, getAtlassianTeamResponse.issueSourceId) &&
        Objects.equals(this.planningStyle, getAtlassianTeamResponse.planningStyle) &&
        Objects.equals(this.sprintLength, getAtlassianTeamResponse.sprintLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacity, id, issueSourceId, planningStyle, sprintLength);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAtlassianTeamResponse {\n");
    
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueSourceId: ").append(toIndentedString(issueSourceId)).append("\n");
    sb.append("    planningStyle: ").append(toIndentedString(planningStyle)).append("\n");
    sb.append("    sprintLength: ").append(toIndentedString(sprintLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

