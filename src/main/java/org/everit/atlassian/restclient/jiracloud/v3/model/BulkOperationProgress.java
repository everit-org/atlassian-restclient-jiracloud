/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.everit.atlassian.restclient.jiracloud.v3.model.User;

/**
 * BulkOperationProgress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:41.549+02:00[Europe/Prague]")
public class BulkOperationProgress {
  @JsonProperty("created")
  private OffsetDateTime created;

  @JsonProperty("failedAccessibleIssues")
  private Map<String, List<String>> failedAccessibleIssues = new HashMap<>();

  @JsonProperty("invalidOrInaccessibleIssueCount")
  private Integer invalidOrInaccessibleIssueCount;

  @JsonProperty("processedAccessibleIssues")
  private List<Long> processedAccessibleIssues = new ArrayList<>();

  @JsonProperty("progressPercent")
  private Long progressPercent;

  @JsonProperty("started")
  private OffsetDateTime started;

  /**
   * The status of the task.
   */
  public enum StatusEnum {
    ENQUEUED("ENQUEUED"),
    
    RUNNING("RUNNING"),
    
    COMPLETE("COMPLETE"),
    
    FAILED("FAILED"),
    
    CANCEL_REQUESTED("CANCEL_REQUESTED"),
    
    CANCELLED("CANCELLED"),
    
    DEAD("DEAD");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("status")
  private StatusEnum status;

  @JsonProperty("submittedBy")
  private User submittedBy;

  @JsonProperty("taskId")
  private String taskId;

  @JsonProperty("totalIssueCount")
  private Integer totalIssueCount;

  @JsonProperty("updated")
  private OffsetDateTime updated;

  public BulkOperationProgress created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * A timestamp of when the task was submitted.
   * @return created
  **/
  @ApiModelProperty(value = "A timestamp of when the task was submitted.")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public BulkOperationProgress failedAccessibleIssues(Map<String, List<String>> failedAccessibleIssues) {
    this.failedAccessibleIssues = failedAccessibleIssues;
    return this;
  }

  public BulkOperationProgress putFailedAccessibleIssuesItem(String key, List<String> failedAccessibleIssuesItem) {
    if (this.failedAccessibleIssues == null) {
      this.failedAccessibleIssues = new HashMap<>();
    }
    this.failedAccessibleIssues.put(key, failedAccessibleIssuesItem);
    return this;
  }

   /**
   * Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons.
   * @return failedAccessibleIssues
  **/
  @ApiModelProperty(value = "Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons.")
  public Map<String, List<String>> getFailedAccessibleIssues() {
    return failedAccessibleIssues;
  }

  public void setFailedAccessibleIssues(Map<String, List<String>> failedAccessibleIssues) {
    this.failedAccessibleIssues = failedAccessibleIssues;
  }

  public BulkOperationProgress invalidOrInaccessibleIssueCount(Integer invalidOrInaccessibleIssueCount) {
    this.invalidOrInaccessibleIssueCount = invalidOrInaccessibleIssueCount;
    return this;
  }

   /**
   * The number of issues that are either invalid or issues that the user doesn&#39;t have permission to view, regardless of the success or failure of the operation.
   * @return invalidOrInaccessibleIssueCount
  **/
  @ApiModelProperty(value = "The number of issues that are either invalid or issues that the user doesn't have permission to view, regardless of the success or failure of the operation.")
  public Integer getInvalidOrInaccessibleIssueCount() {
    return invalidOrInaccessibleIssueCount;
  }

  public void setInvalidOrInaccessibleIssueCount(Integer invalidOrInaccessibleIssueCount) {
    this.invalidOrInaccessibleIssueCount = invalidOrInaccessibleIssueCount;
  }

  public BulkOperationProgress processedAccessibleIssues(List<Long> processedAccessibleIssues) {
    this.processedAccessibleIssues = processedAccessibleIssues;
    return this;
  }

  public BulkOperationProgress addProcessedAccessibleIssuesItem(Long processedAccessibleIssuesItem) {
    if (this.processedAccessibleIssues == null) {
      this.processedAccessibleIssues = new ArrayList<>();
    }
    this.processedAccessibleIssues.add(processedAccessibleIssuesItem);
    return this;
  }

   /**
   * List of issue IDs for which the operation was successful and that the user has permission to view.
   * @return processedAccessibleIssues
  **/
  @ApiModelProperty(value = "List of issue IDs for which the operation was successful and that the user has permission to view.")
  public List<Long> getProcessedAccessibleIssues() {
    return processedAccessibleIssues;
  }

  public void setProcessedAccessibleIssues(List<Long> processedAccessibleIssues) {
    this.processedAccessibleIssues = processedAccessibleIssues;
  }

  public BulkOperationProgress progressPercent(Long progressPercent) {
    this.progressPercent = progressPercent;
    return this;
  }

   /**
   * Progress of the task as a percentage.
   * @return progressPercent
  **/
  @ApiModelProperty(value = "Progress of the task as a percentage.")
  public Long getProgressPercent() {
    return progressPercent;
  }

  public void setProgressPercent(Long progressPercent) {
    this.progressPercent = progressPercent;
  }

  public BulkOperationProgress started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

   /**
   * A timestamp of when the task was started.
   * @return started
  **/
  @ApiModelProperty(value = "A timestamp of when the task was started.")
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }

  public BulkOperationProgress status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the task.
   * @return status
  **/
  @ApiModelProperty(value = "The status of the task.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public BulkOperationProgress submittedBy(User submittedBy) {
    this.submittedBy = submittedBy;
    return this;
  }

   /**
   * Get submittedBy
   * @return submittedBy
  **/
  @ApiModelProperty(value = "")
  public User getSubmittedBy() {
    return submittedBy;
  }

  public void setSubmittedBy(User submittedBy) {
    this.submittedBy = submittedBy;
  }

   /**
   * The ID of the task.
   * @return taskId
  **/
  @ApiModelProperty(value = "The ID of the task.")
  public String getTaskId() {
    return taskId;
  }

  public BulkOperationProgress totalIssueCount(Integer totalIssueCount) {
    this.totalIssueCount = totalIssueCount;
    return this;
  }

   /**
   * The number of issues that the bulk operation was attempted on.
   * @return totalIssueCount
  **/
  @ApiModelProperty(value = "The number of issues that the bulk operation was attempted on.")
  public Integer getTotalIssueCount() {
    return totalIssueCount;
  }

  public void setTotalIssueCount(Integer totalIssueCount) {
    this.totalIssueCount = totalIssueCount;
  }

  public BulkOperationProgress updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

   /**
   * A timestamp of when the task progress was last updated.
   * @return updated
  **/
  @ApiModelProperty(value = "A timestamp of when the task progress was last updated.")
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkOperationProgress bulkOperationProgress = (BulkOperationProgress) o;
    return Objects.equals(this.created, bulkOperationProgress.created) &&
        Objects.equals(this.failedAccessibleIssues, bulkOperationProgress.failedAccessibleIssues) &&
        Objects.equals(this.invalidOrInaccessibleIssueCount, bulkOperationProgress.invalidOrInaccessibleIssueCount) &&
        Objects.equals(this.processedAccessibleIssues, bulkOperationProgress.processedAccessibleIssues) &&
        Objects.equals(this.progressPercent, bulkOperationProgress.progressPercent) &&
        Objects.equals(this.started, bulkOperationProgress.started) &&
        Objects.equals(this.status, bulkOperationProgress.status) &&
        Objects.equals(this.submittedBy, bulkOperationProgress.submittedBy) &&
        Objects.equals(this.taskId, bulkOperationProgress.taskId) &&
        Objects.equals(this.totalIssueCount, bulkOperationProgress.totalIssueCount) &&
        Objects.equals(this.updated, bulkOperationProgress.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, failedAccessibleIssues, invalidOrInaccessibleIssueCount, processedAccessibleIssues, progressPercent, started, status, submittedBy, taskId, totalIssueCount, updated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkOperationProgress {\n");
    
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    failedAccessibleIssues: ").append(toIndentedString(failedAccessibleIssues)).append("\n");
    sb.append("    invalidOrInaccessibleIssueCount: ").append(toIndentedString(invalidOrInaccessibleIssueCount)).append("\n");
    sb.append("    processedAccessibleIssues: ").append(toIndentedString(processedAccessibleIssues)).append("\n");
    sb.append("    progressPercent: ").append(toIndentedString(progressPercent)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submittedBy: ").append(toIndentedString(submittedBy)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    totalIssueCount: ").append(toIndentedString(totalIssueCount)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

