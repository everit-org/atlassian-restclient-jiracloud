/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * IssueBulkEditField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:41.549+02:00[Europe/Prague]")
public class IssueBulkEditField {
  @JsonProperty("description")
  private String description;

  @JsonProperty("fieldOptions")
  private List<Object> fieldOptions = new ArrayList<>();

  @JsonProperty("id")
  private String id;

  @JsonProperty("isRequired")
  private Boolean isRequired;

  /**
   * Gets or Sets multiSelectFieldOptions
   */
  public enum MultiSelectFieldOptionsEnum {
    ADD("ADD"),
    
    REMOVE("REMOVE"),
    
    REPLACE("REPLACE"),
    
    REMOVE_ALL("REMOVE_ALL");

    private String value;

    MultiSelectFieldOptionsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MultiSelectFieldOptionsEnum fromValue(String value) {
      for (MultiSelectFieldOptionsEnum b : MultiSelectFieldOptionsEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  @JsonProperty("multiSelectFieldOptions")
  private List<MultiSelectFieldOptionsEnum> multiSelectFieldOptions = new ArrayList<>();

  @JsonProperty("name")
  private String name;

  @JsonProperty("searchUrl")
  private String searchUrl;

  @JsonProperty("type")
  private String type;

  @JsonProperty("unavailableMessage")
  private String unavailableMessage;

  public IssueBulkEditField description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the field.
   * @return description
  **/
  @ApiModelProperty(value = "Description of the field.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public IssueBulkEditField fieldOptions(List<Object> fieldOptions) {
    this.fieldOptions = fieldOptions;
    return this;
  }

  public IssueBulkEditField addFieldOptionsItem(Object fieldOptionsItem) {
    if (this.fieldOptions == null) {
      this.fieldOptions = new ArrayList<>();
    }
    this.fieldOptions.add(fieldOptionsItem);
    return this;
  }

   /**
   * A list of options related to the field, applicable in contexts where multiple selections are allowed.
   * @return fieldOptions
  **/
  @ApiModelProperty(value = "A list of options related to the field, applicable in contexts where multiple selections are allowed.")
  public List<Object> getFieldOptions() {
    return fieldOptions;
  }

  public void setFieldOptions(List<Object> fieldOptions) {
    this.fieldOptions = fieldOptions;
  }

  public IssueBulkEditField id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique ID of the field.
   * @return id
  **/
  @ApiModelProperty(value = "The unique ID of the field.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public IssueBulkEditField isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

   /**
   * Indicates whether the field is mandatory for the operation.
   * @return isRequired
  **/
  @ApiModelProperty(value = "Indicates whether the field is mandatory for the operation.")
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }

  public IssueBulkEditField multiSelectFieldOptions(List<MultiSelectFieldOptionsEnum> multiSelectFieldOptions) {
    this.multiSelectFieldOptions = multiSelectFieldOptions;
    return this;
  }

  public IssueBulkEditField addMultiSelectFieldOptionsItem(MultiSelectFieldOptionsEnum multiSelectFieldOptionsItem) {
    if (this.multiSelectFieldOptions == null) {
      this.multiSelectFieldOptions = new ArrayList<>();
    }
    this.multiSelectFieldOptions.add(multiSelectFieldOptionsItem);
    return this;
  }

   /**
   * Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.
   * @return multiSelectFieldOptions
  **/
  @ApiModelProperty(value = "Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.")
  public List<MultiSelectFieldOptionsEnum> getMultiSelectFieldOptions() {
    return multiSelectFieldOptions;
  }

  public void setMultiSelectFieldOptions(List<MultiSelectFieldOptionsEnum> multiSelectFieldOptions) {
    this.multiSelectFieldOptions = multiSelectFieldOptions;
  }

  public IssueBulkEditField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The display name of the field.
   * @return name
  **/
  @ApiModelProperty(value = "The display name of the field.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IssueBulkEditField searchUrl(String searchUrl) {
    this.searchUrl = searchUrl;
    return this;
  }

   /**
   * A URL to fetch additional data for the field
   * @return searchUrl
  **/
  @ApiModelProperty(value = "A URL to fetch additional data for the field")
  public String getSearchUrl() {
    return searchUrl;
  }

  public void setSearchUrl(String searchUrl) {
    this.searchUrl = searchUrl;
  }

  public IssueBulkEditField type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the field.
   * @return type
  **/
  @ApiModelProperty(value = "The type of the field.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public IssueBulkEditField unavailableMessage(String unavailableMessage) {
    this.unavailableMessage = unavailableMessage;
    return this;
  }

   /**
   * A message indicating why the field is unavailable for editing.
   * @return unavailableMessage
  **/
  @ApiModelProperty(value = "A message indicating why the field is unavailable for editing.")
  public String getUnavailableMessage() {
    return unavailableMessage;
  }

  public void setUnavailableMessage(String unavailableMessage) {
    this.unavailableMessage = unavailableMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueBulkEditField issueBulkEditField = (IssueBulkEditField) o;
    return Objects.equals(this.description, issueBulkEditField.description) &&
        Objects.equals(this.fieldOptions, issueBulkEditField.fieldOptions) &&
        Objects.equals(this.id, issueBulkEditField.id) &&
        Objects.equals(this.isRequired, issueBulkEditField.isRequired) &&
        Objects.equals(this.multiSelectFieldOptions, issueBulkEditField.multiSelectFieldOptions) &&
        Objects.equals(this.name, issueBulkEditField.name) &&
        Objects.equals(this.searchUrl, issueBulkEditField.searchUrl) &&
        Objects.equals(this.type, issueBulkEditField.type) &&
        Objects.equals(this.unavailableMessage, issueBulkEditField.unavailableMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, fieldOptions, id, isRequired, multiSelectFieldOptions, name, searchUrl, type, unavailableMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueBulkEditField {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fieldOptions: ").append(toIndentedString(fieldOptions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    multiSelectFieldOptions: ").append(toIndentedString(multiSelectFieldOptions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    searchUrl: ").append(toIndentedString(searchUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unavailableMessage: ").append(toIndentedString(unavailableMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

