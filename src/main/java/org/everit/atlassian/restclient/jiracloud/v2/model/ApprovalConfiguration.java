/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.everit.atlassian.restclient.jiracloud.v2.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * The approval configuration of a status within a workflow. Applies only to Jira Service Management
 * approvals.
 */
@ApiModel(
    description = "The approval configuration of a status within a workflow. Applies only to Jira Service Management approvals.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-03-31T17:15:14.708+02:00[Europe/Prague]")
public class ApprovalConfiguration {
  /**
   * Whether the approval configuration is active.
   */
  public enum ActiveEnum {
    FALSE("false"),

    TRUE("true");

    @JsonCreator
    public static ActiveEnum fromValue(String value) {
      for (ActiveEnum b : ActiveEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    private String value;

    ActiveEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return this.value;
    }

    @Override
    public String toString() {
      return String.valueOf(this.value);
    }
  }

  /**
   * How the required approval count is calculated. It may be configured to require a specific
   * number of approvals, or approval by a percentage of approvers. If the approvers source field is
   * Approver groups, you can configure how many approvals per group are required for the request to
   * be approved. The number will be the same across all groups.
   */
  public enum ConditionTypeEnum {
    NUMBER("number"),

    NUMBERPERPRINCIPAL("numberPerPrincipal"),

    PERCENT("percent");

    @JsonCreator
    public static ConditionTypeEnum fromValue(String value) {
      for (ConditionTypeEnum b : ConditionTypeEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    private String value;

    ConditionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return this.value;
    }

    @Override
    public String toString() {
      return String.valueOf(this.value);
    }
  }

  /**
   * A list of roles that should be excluded as possible approvers.
   */
  public enum ExcludeEnum {
    ASSIGNEE("assignee"),

    REPORTER("reporter");

    @JsonCreator
    public static ExcludeEnum fromValue(String value) {
      for (ExcludeEnum b : ExcludeEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    private String value;

    ExcludeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return this.value;
    }

    @Override
    public String toString() {
      return String.valueOf(this.value);
    }
  }

  @JsonProperty("active")
  private ActiveEnum active;

  @JsonProperty("conditionType")
  private ConditionTypeEnum conditionType;

  @JsonProperty("conditionValue")
  private String conditionValue;

  @JsonProperty("exclude")
  private ExcludeEnum exclude;

  @JsonProperty("fieldId")
  private String fieldId;

  @JsonProperty("prePopulatedFieldId")
  private String prePopulatedFieldId;

  @JsonProperty("transitionApproved")
  private String transitionApproved;

  @JsonProperty("transitionRejected")
  private String transitionRejected;

  public ApprovalConfiguration active(ActiveEnum active) {
    this.active = active;
    return this;
  }

  public ApprovalConfiguration addExcludeItem(ExcludeEnum exclude) {
    this.exclude = exclude;
    return this;
  }

  public ApprovalConfiguration conditionType(ConditionTypeEnum conditionType) {
    this.conditionType = conditionType;
    return this;
  }

  public ApprovalConfiguration conditionValue(String conditionValue) {
    this.conditionValue = conditionValue;
    return this;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalConfiguration approvalConfiguration = (ApprovalConfiguration) o;
    return Objects.equals(this.active, approvalConfiguration.active) &&
        Objects.equals(this.conditionType, approvalConfiguration.conditionType) &&
        Objects.equals(this.conditionValue, approvalConfiguration.conditionValue) &&
        Objects.equals(this.exclude, approvalConfiguration.exclude) &&
        Objects.equals(this.fieldId, approvalConfiguration.fieldId) &&
        Objects.equals(this.prePopulatedFieldId, approvalConfiguration.prePopulatedFieldId) &&
        Objects.equals(this.transitionApproved, approvalConfiguration.transitionApproved) &&
        Objects.equals(this.transitionRejected, approvalConfiguration.transitionRejected);
  }

  public ApprovalConfiguration exclude(ExcludeEnum exclude) {
    this.exclude = exclude;
    return this;
  }

  public ApprovalConfiguration fieldId(String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  /**
   * Whether the approval configuration is active.
   * 
   * @return active
   **/
  @ApiModelProperty(required = true, value = "Whether the approval configuration is active.")
  public ActiveEnum getActive() {
    return this.active;
  }

  /**
   * How the required approval count is calculated. It may be configured to require a specific
   * number of approvals, or approval by a percentage of approvers. If the approvers source field is
   * Approver groups, you can configure how many approvals per group are required for the request to
   * be approved. The number will be the same across all groups.
   * 
   * @return conditionType
   **/
  @ApiModelProperty(required = true,
      value = "How the required approval count is calculated. It may be configured to require a specific number of approvals, or approval by a percentage of approvers. If the approvers source field is Approver groups, you can configure how many approvals per group are required for the request to be approved. The number will be the same across all groups.")
  public ConditionTypeEnum getConditionType() {
    return this.conditionType;
  }

  /**
   * The number or percentage of approvals required for a request to be approved. If
   * &#x60;conditionType&#x60; is &#x60;number&#x60;, the value must be 20 or less. If
   * &#x60;conditionType&#x60; is &#x60;percent&#x60;, the value must be 100 or less.
   * 
   * @return conditionValue
   **/
  @ApiModelProperty(required = true,
      value = "The number or percentage of approvals required for a request to be approved. If `conditionType` is `number`, the value must be 20 or less. If `conditionType` is `percent`, the value must be 100 or less.")
  public String getConditionValue() {
    return this.conditionValue;
  }

  /**
   * A list of roles that should be excluded as possible approvers.
   * 
   * @return exclude
   **/
  @ApiModelProperty(value = "A list of roles that should be excluded as possible approvers.")
  public ExcludeEnum getExclude() {
    return this.exclude;
  }

  /**
   * The custom field ID of the \&quot;Approvers\&quot; or \&quot;Approver Groups\&quot; field.
   * 
   * @return fieldId
   **/
  @ApiModelProperty(required = true,
      value = "The custom field ID of the \"Approvers\" or \"Approver Groups\" field.")
  public String getFieldId() {
    return this.fieldId;
  }

  /**
   * The custom field ID of the field used to pre-populate the Approver field. Only supports the
   * \&quot;Affected Services\&quot; field.
   * 
   * @return prePopulatedFieldId
   **/
  @ApiModelProperty(
      value = "The custom field ID of the field used to pre-populate the Approver field. Only supports the \"Affected Services\" field.")
  public String getPrePopulatedFieldId() {
    return this.prePopulatedFieldId;
  }

  /**
   * The numeric ID of the transition to be executed if the request is approved.
   * 
   * @return transitionApproved
   **/
  @ApiModelProperty(required = true,
      value = "The numeric ID of the transition to be executed if the request is approved.")
  public String getTransitionApproved() {
    return this.transitionApproved;
  }

  /**
   * The numeric ID of the transition to be executed if the request is declined.
   * 
   * @return transitionRejected
   **/
  @ApiModelProperty(required = true,
      value = "The numeric ID of the transition to be executed if the request is declined.")
  public String getTransitionRejected() {
    return this.transitionRejected;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.active, this.conditionType, this.conditionValue, this.exclude,
        this.fieldId, this.prePopulatedFieldId, this.transitionApproved, this.transitionRejected);
  }

  public ApprovalConfiguration prePopulatedFieldId(String prePopulatedFieldId) {
    this.prePopulatedFieldId = prePopulatedFieldId;
    return this;
  }

  public void setActive(ActiveEnum active) {
    this.active = active;
  }

  public void setConditionType(ConditionTypeEnum conditionType) {
    this.conditionType = conditionType;
  }

  public void setConditionValue(String conditionValue) {
    this.conditionValue = conditionValue;
  }

  public void setExclude(ExcludeEnum exclude) {
    this.exclude = exclude;
  }

  public void setFieldId(String fieldId) {
    this.fieldId = fieldId;
  }

  public void setPrePopulatedFieldId(String prePopulatedFieldId) {
    this.prePopulatedFieldId = prePopulatedFieldId;
  }

  public void setTransitionApproved(String transitionApproved) {
    this.transitionApproved = transitionApproved;
  }

  public void setTransitionRejected(String transitionRejected) {
    this.transitionRejected = transitionRejected;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalConfiguration {\n");

    sb.append("    active: ").append(toIndentedString(this.active)).append("\n");
    sb.append("    conditionType: ").append(toIndentedString(this.conditionType)).append("\n");
    sb.append("    conditionValue: ").append(toIndentedString(this.conditionValue)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(this.exclude)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(this.fieldId)).append("\n");
    sb.append("    prePopulatedFieldId: ").append(toIndentedString(this.prePopulatedFieldId))
        .append("\n");
    sb.append("    transitionApproved: ").append(toIndentedString(this.transitionApproved))
        .append("\n");
    sb.append("    transitionRejected: ").append(toIndentedString(this.transitionRejected))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  public ApprovalConfiguration transitionApproved(String transitionApproved) {
    this.transitionApproved = transitionApproved;
    return this;
  }

  public ApprovalConfiguration transitionRejected(String transitionRejected) {
    this.transitionRejected = transitionRejected;
    return this;
  }

}
