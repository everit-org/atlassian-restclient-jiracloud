/*
 * Copyright © 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.everit.atlassian.restclient.jiracloud.v3.model.TargetClassification;
import org.everit.atlassian.restclient.jiracloud.v3.model.TargetMandatoryFields;
import org.everit.atlassian.restclient.jiracloud.v3.model.TargetStatus;

/**
 * An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.
 */
@ApiModel(description = "An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:41.549+02:00[Europe/Prague]")
public class TargetToSourcesMapping {
  @JsonProperty("inferClassificationDefaults")
  private Boolean inferClassificationDefaults;

  @JsonProperty("inferFieldDefaults")
  private Boolean inferFieldDefaults;

  @JsonProperty("inferStatusDefaults")
  private Boolean inferStatusDefaults;

  @JsonProperty("inferSubtaskTypeDefault")
  private Boolean inferSubtaskTypeDefault;

  @JsonProperty("issueIdsOrKeys")
  private List<String> issueIdsOrKeys = new ArrayList<>();

  @JsonProperty("targetClassification")
  private List<TargetClassification> targetClassification = new ArrayList<>();

  @JsonProperty("targetMandatoryFields")
  private List<TargetMandatoryFields> targetMandatoryFields = new ArrayList<>();

  @JsonProperty("targetStatus")
  private List<TargetStatus> targetStatus = new ArrayList<>();

  public TargetToSourcesMapping inferClassificationDefaults(Boolean inferClassificationDefaults) {
    this.inferClassificationDefaults = inferClassificationDefaults;
    return this;
  }

   /**
   * If &#x60;true&#x60;, when issues are moved into this target group, they will adopt the target project&#39;s default classification, if they don&#39;t have a classification already. If they do have a classification, it will be kept the same even after the move. Leave &#x60;targetClassification&#x60; empty when using this.  If &#x60;false&#x60;, you must provide a &#x60;targetClassification&#x60; mapping for each classification associated with the selected issues.  [Benefit from data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)
   * @return inferClassificationDefaults
  **/
  @ApiModelProperty(required = true, value = "If `true`, when issues are moved into this target group, they will adopt the target project's default classification, if they don't have a classification already. If they do have a classification, it will be kept the same even after the move. Leave `targetClassification` empty when using this.  If `false`, you must provide a `targetClassification` mapping for each classification associated with the selected issues.  [Benefit from data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/)")
  public Boolean getInferClassificationDefaults() {
    return inferClassificationDefaults;
  }

  public void setInferClassificationDefaults(Boolean inferClassificationDefaults) {
    this.inferClassificationDefaults = inferClassificationDefaults;
  }

  public TargetToSourcesMapping inferFieldDefaults(Boolean inferFieldDefaults) {
    this.inferFieldDefaults = inferFieldDefaults;
    return this;
  }

   /**
   * If &#x60;true&#x60;, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The &#x60;targetMandatoryFields&#x60; property shouldn&#39;t be defined.  If &#x60;false&#x60;, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the &#x60;targetMandatoryFields&#x60; property
   * @return inferFieldDefaults
  **/
  @ApiModelProperty(required = true, value = "If `true`, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The `targetMandatoryFields` property shouldn't be defined.  If `false`, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the `targetMandatoryFields` property")
  public Boolean getInferFieldDefaults() {
    return inferFieldDefaults;
  }

  public void setInferFieldDefaults(Boolean inferFieldDefaults) {
    this.inferFieldDefaults = inferFieldDefaults;
  }

  public TargetToSourcesMapping inferStatusDefaults(Boolean inferStatusDefaults) {
    this.inferStatusDefaults = inferStatusDefaults;
    return this;
  }

   /**
   * If &#x60;true&#x60;, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave &#x60;targetStatus&#x60; empty when using this.  If &#x60;false&#x60;, you must provide a &#x60;targetStatus&#x60; for each status not present in the target workflow.  The default status in a workflow is referred to as the \&quot;initial status\&quot;. Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/)
   * @return inferStatusDefaults
  **/
  @ApiModelProperty(required = true, value = "If `true`, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave `targetStatus` empty when using this.  If `false`, you must provide a `targetStatus` for each status not present in the target workflow.  The default status in a workflow is referred to as the \"initial status\". Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/)")
  public Boolean getInferStatusDefaults() {
    return inferStatusDefaults;
  }

  public void setInferStatusDefaults(Boolean inferStatusDefaults) {
    this.inferStatusDefaults = inferStatusDefaults;
  }

  public TargetToSourcesMapping inferSubtaskTypeDefault(Boolean inferSubtaskTypeDefault) {
    this.inferSubtaskTypeDefault = inferSubtaskTypeDefault;
    return this;
  }

   /**
   * When an issue is moved, its subtasks (if there are any) need to be moved with it. &#x60;inferSubtaskTypeDefault&#x60; helps with moving the subtasks by picking a random subtask type in the target project.  If &#x60;true&#x60;, subtasks will automatically move to the same project as their parent.  When they move:   *  Their &#x60;issueType&#x60; will be set to the default for subtasks in the target project.  *  Values for mandatory fields will be retained from the source issues  *  Specifying separate mapping for implicit subtasks won’t be allowed.  If &#x60;false&#x60;, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved.
   * @return inferSubtaskTypeDefault
  **/
  @ApiModelProperty(required = true, value = "When an issue is moved, its subtasks (if there are any) need to be moved with it. `inferSubtaskTypeDefault` helps with moving the subtasks by picking a random subtask type in the target project.  If `true`, subtasks will automatically move to the same project as their parent.  When they move:   *  Their `issueType` will be set to the default for subtasks in the target project.  *  Values for mandatory fields will be retained from the source issues  *  Specifying separate mapping for implicit subtasks won’t be allowed.  If `false`, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved.")
  public Boolean getInferSubtaskTypeDefault() {
    return inferSubtaskTypeDefault;
  }

  public void setInferSubtaskTypeDefault(Boolean inferSubtaskTypeDefault) {
    this.inferSubtaskTypeDefault = inferSubtaskTypeDefault;
  }

  public TargetToSourcesMapping issueIdsOrKeys(List<String> issueIdsOrKeys) {
    this.issueIdsOrKeys = issueIdsOrKeys;
    return this;
  }

  public TargetToSourcesMapping addIssueIdsOrKeysItem(String issueIdsOrKeysItem) {
    if (this.issueIdsOrKeys == null) {
      this.issueIdsOrKeys = new ArrayList<>();
    }
    this.issueIdsOrKeys.add(issueIdsOrKeysItem);
    return this;
  }

   /**
   * List of issue IDs or keys to be moved. These issues must be from the same project, have the same issue type, and be from the same parent (if they’re subtasks).
   * @return issueIdsOrKeys
  **/
  @ApiModelProperty(value = "List of issue IDs or keys to be moved. These issues must be from the same project, have the same issue type, and be from the same parent (if they’re subtasks).")
  public List<String> getIssueIdsOrKeys() {
    return issueIdsOrKeys;
  }

  public void setIssueIdsOrKeys(List<String> issueIdsOrKeys) {
    this.issueIdsOrKeys = issueIdsOrKeys;
  }

  public TargetToSourcesMapping targetClassification(List<TargetClassification> targetClassification) {
    this.targetClassification = targetClassification;
    return this;
  }

  public TargetToSourcesMapping addTargetClassificationItem(TargetClassification targetClassificationItem) {
    if (this.targetClassification == null) {
      this.targetClassification = new ArrayList<>();
    }
    this.targetClassification.add(targetClassificationItem);
    return this;
  }

   /**
   * List of the objects containing classifications in the source issues and their new values which need to be set during the bulk move operation.   *  **You should only define this property when &#x60;inferClassificationDefaults&#x60; is &#x60;false&#x60;.**  *  **In order to provide mapping for issues which don&#39;t have a classification, use &#x60;\&quot;-1\&quot;&#x60;.**
   * @return targetClassification
  **/
  @ApiModelProperty(value = "List of the objects containing classifications in the source issues and their new values which need to be set during the bulk move operation.   *  **You should only define this property when `inferClassificationDefaults` is `false`.**  *  **In order to provide mapping for issues which don't have a classification, use `\"-1\"`.**")
  public List<TargetClassification> getTargetClassification() {
    return targetClassification;
  }

  public void setTargetClassification(List<TargetClassification> targetClassification) {
    this.targetClassification = targetClassification;
  }

  public TargetToSourcesMapping targetMandatoryFields(List<TargetMandatoryFields> targetMandatoryFields) {
    this.targetMandatoryFields = targetMandatoryFields;
    return this;
  }

  public TargetToSourcesMapping addTargetMandatoryFieldsItem(TargetMandatoryFields targetMandatoryFieldsItem) {
    if (this.targetMandatoryFields == null) {
      this.targetMandatoryFields = new ArrayList<>();
    }
    this.targetMandatoryFields.add(targetMandatoryFieldsItem);
    return this;
  }

   /**
   * List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.  The new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).  **You should only define this property when &#x60;inferFieldDefaults&#x60; is &#x60;false&#x60;.**
   * @return targetMandatoryFields
  **/
  @ApiModelProperty(value = "List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.  The new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).  **You should only define this property when `inferFieldDefaults` is `false`.**")
  public List<TargetMandatoryFields> getTargetMandatoryFields() {
    return targetMandatoryFields;
  }

  public void setTargetMandatoryFields(List<TargetMandatoryFields> targetMandatoryFields) {
    this.targetMandatoryFields = targetMandatoryFields;
  }

  public TargetToSourcesMapping targetStatus(List<TargetStatus> targetStatus) {
    this.targetStatus = targetStatus;
    return this;
  }

  public TargetToSourcesMapping addTargetStatusItem(TargetStatus targetStatusItem) {
    if (this.targetStatus == null) {
      this.targetStatus = new ArrayList<>();
    }
    this.targetStatus.add(targetStatusItem);
    return this;
  }

   /**
   * List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.  The new values will only be applied if the source status is invalid for the target project and issue type.  **You should only define this property when &#x60;inferStatusDefaults&#x60; is &#x60;false&#x60;.**
   * @return targetStatus
  **/
  @ApiModelProperty(value = "List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.  The new values will only be applied if the source status is invalid for the target project and issue type.  **You should only define this property when `inferStatusDefaults` is `false`.**")
  public List<TargetStatus> getTargetStatus() {
    return targetStatus;
  }

  public void setTargetStatus(List<TargetStatus> targetStatus) {
    this.targetStatus = targetStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetToSourcesMapping targetToSourcesMapping = (TargetToSourcesMapping) o;
    return Objects.equals(this.inferClassificationDefaults, targetToSourcesMapping.inferClassificationDefaults) &&
        Objects.equals(this.inferFieldDefaults, targetToSourcesMapping.inferFieldDefaults) &&
        Objects.equals(this.inferStatusDefaults, targetToSourcesMapping.inferStatusDefaults) &&
        Objects.equals(this.inferSubtaskTypeDefault, targetToSourcesMapping.inferSubtaskTypeDefault) &&
        Objects.equals(this.issueIdsOrKeys, targetToSourcesMapping.issueIdsOrKeys) &&
        Objects.equals(this.targetClassification, targetToSourcesMapping.targetClassification) &&
        Objects.equals(this.targetMandatoryFields, targetToSourcesMapping.targetMandatoryFields) &&
        Objects.equals(this.targetStatus, targetToSourcesMapping.targetStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inferClassificationDefaults, inferFieldDefaults, inferStatusDefaults, inferSubtaskTypeDefault, issueIdsOrKeys, targetClassification, targetMandatoryFields, targetStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetToSourcesMapping {\n");
    
    sb.append("    inferClassificationDefaults: ").append(toIndentedString(inferClassificationDefaults)).append("\n");
    sb.append("    inferFieldDefaults: ").append(toIndentedString(inferFieldDefaults)).append("\n");
    sb.append("    inferStatusDefaults: ").append(toIndentedString(inferStatusDefaults)).append("\n");
    sb.append("    inferSubtaskTypeDefault: ").append(toIndentedString(inferSubtaskTypeDefault)).append("\n");
    sb.append("    issueIdsOrKeys: ").append(toIndentedString(issueIdsOrKeys)).append("\n");
    sb.append("    targetClassification: ").append(toIndentedString(targetClassification)).append("\n");
    sb.append("    targetMandatoryFields: ").append(toIndentedString(targetMandatoryFields)).append("\n");
    sb.append("    targetStatus: ").append(toIndentedString(targetStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

