/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.everit.atlassian.restclient.jiracloud.v2.model.PriorityMapping;
import org.everit.atlassian.restclient.jiracloud.v2.model.UpdatePrioritiesInSchemeRequestBean;
import org.everit.atlassian.restclient.jiracloud.v2.model.UpdateProjectsInSchemeRequestBean;

/**
 * Details of a priority scheme.
 */
@ApiModel(description = "Details of a priority scheme.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:14.708+02:00[Europe/Prague]")
public class UpdatePrioritySchemeRequestBean {
  @JsonProperty("defaultPriorityId")
  private Long defaultPriorityId;

  @JsonProperty("description")
  private String description;

  @JsonProperty("mappings")
  private PriorityMapping mappings;

  @JsonProperty("name")
  private String name;

  @JsonProperty("priorities")
  private UpdatePrioritiesInSchemeRequestBean priorities;

  @JsonProperty("projects")
  private UpdateProjectsInSchemeRequestBean projects;

  public UpdatePrioritySchemeRequestBean defaultPriorityId(Long defaultPriorityId) {
    this.defaultPriorityId = defaultPriorityId;
    return this;
  }

   /**
   * The default priority of the scheme.
   * @return defaultPriorityId
  **/
  @ApiModelProperty(value = "The default priority of the scheme.")
  public Long getDefaultPriorityId() {
    return defaultPriorityId;
  }

  public void setDefaultPriorityId(Long defaultPriorityId) {
    this.defaultPriorityId = defaultPriorityId;
  }

  public UpdatePrioritySchemeRequestBean description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the priority scheme.
   * @return description
  **/
  @ApiModelProperty(value = "The description of the priority scheme.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public UpdatePrioritySchemeRequestBean mappings(PriorityMapping mappings) {
    this.mappings = mappings;
    return this;
  }

   /**
   * Instructions to migrate the priorities of issues.  &#x60;in&#x60; mappings are used to migrate the priorities of issues to priorities used within the priority scheme.  &#x60;out&#x60; mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.   *  When **priorities** are **added** to the priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.  *  When **priorities** are **removed** from the priority scheme, issues that are using those priorities must be migrated to new priorities used by the priority scheme.           *  An &#x60;in&#x60; mapping must be provided for each of these priorities.  *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)&#39; priority scheme(s).           *  An &#x60;in&#x60; mapping must be provided for each of these priorities.  *  When **projects** are **removed** from the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities within the **Default Priority Scheme** that are not used by the priority scheme. This can occur when the **Default Priority Scheme** does not use all the priorities within the current scheme.           *  An &#x60;out&#x60; mapping must be provided for each of these priorities.  For more information on &#x60;in&#x60; and &#x60;out&#x60; mappings, see the child properties documentation for the &#x60;PriorityMapping&#x60; object below.
   * @return mappings
  **/
  @ApiModelProperty(value = "Instructions to migrate the priorities of issues.  `in` mappings are used to migrate the priorities of issues to priorities used within the priority scheme.  `out` mappings are used to migrate the priorities of issues to priorities not used within the priority scheme.   *  When **priorities** are **added** to the priority scheme, no mapping needs to be provided as the new priorities are not used by any issues.  *  When **priorities** are **removed** from the priority scheme, issues that are using those priorities must be migrated to new priorities used by the priority scheme.           *  An `in` mapping must be provided for each of these priorities.  *  When **projects** are **added** to the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities used by the priority scheme. This can occur when the current scheme does not use all the priorities in the project(s)' priority scheme(s).           *  An `in` mapping must be provided for each of these priorities.  *  When **projects** are **removed** from the priority scheme, the priorities of issues in those projects might need to be migrated to new priorities within the **Default Priority Scheme** that are not used by the priority scheme. This can occur when the **Default Priority Scheme** does not use all the priorities within the current scheme.           *  An `out` mapping must be provided for each of these priorities.  For more information on `in` and `out` mappings, see the child properties documentation for the `PriorityMapping` object below.")
  public PriorityMapping getMappings() {
    return mappings;
  }

  public void setMappings(PriorityMapping mappings) {
    this.mappings = mappings;
  }

  public UpdatePrioritySchemeRequestBean name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the priority scheme. Must be unique.
   * @return name
  **/
  @ApiModelProperty(value = "The name of the priority scheme. Must be unique.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UpdatePrioritySchemeRequestBean priorities(UpdatePrioritiesInSchemeRequestBean priorities) {
    this.priorities = priorities;
    return this;
  }

   /**
   * The priorities in the scheme.
   * @return priorities
  **/
  @ApiModelProperty(value = "The priorities in the scheme.")
  public UpdatePrioritiesInSchemeRequestBean getPriorities() {
    return priorities;
  }

  public void setPriorities(UpdatePrioritiesInSchemeRequestBean priorities) {
    this.priorities = priorities;
  }

  public UpdatePrioritySchemeRequestBean projects(UpdateProjectsInSchemeRequestBean projects) {
    this.projects = projects;
    return this;
  }

   /**
   * The projects in the scheme.
   * @return projects
  **/
  @ApiModelProperty(value = "The projects in the scheme.")
  public UpdateProjectsInSchemeRequestBean getProjects() {
    return projects;
  }

  public void setProjects(UpdateProjectsInSchemeRequestBean projects) {
    this.projects = projects;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePrioritySchemeRequestBean updatePrioritySchemeRequestBean = (UpdatePrioritySchemeRequestBean) o;
    return Objects.equals(this.defaultPriorityId, updatePrioritySchemeRequestBean.defaultPriorityId) &&
        Objects.equals(this.description, updatePrioritySchemeRequestBean.description) &&
        Objects.equals(this.mappings, updatePrioritySchemeRequestBean.mappings) &&
        Objects.equals(this.name, updatePrioritySchemeRequestBean.name) &&
        Objects.equals(this.priorities, updatePrioritySchemeRequestBean.priorities) &&
        Objects.equals(this.projects, updatePrioritySchemeRequestBean.projects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultPriorityId, description, mappings, name, priorities, projects);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePrioritySchemeRequestBean {\n");
    
    sb.append("    defaultPriorityId: ").append(toIndentedString(defaultPriorityId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priorities: ").append(toIndentedString(priorities)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

