/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.everit.atlassian.restclient.jiracloud.v3.model.Error;

/**
 * Errors
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:41.549+02:00[Europe/Prague]")
public class Errors {
  @JsonProperty("issueIsSubtask")
  private Error issueIsSubtask;

  @JsonProperty("issuesInArchivedProjects")
  private Error issuesInArchivedProjects;

  @JsonProperty("issuesInUnlicensedProjects")
  private Error issuesInUnlicensedProjects;

  @JsonProperty("issuesNotFound")
  private Error issuesNotFound;

  @JsonProperty("userDoesNotHavePermission")
  private Error userDoesNotHavePermission;

  public Errors issueIsSubtask(Error issueIsSubtask) {
    this.issueIsSubtask = issueIsSubtask;
    return this;
  }

   /**
   * Get issueIsSubtask
   * @return issueIsSubtask
  **/
  @ApiModelProperty(value = "")
  public Error getIssueIsSubtask() {
    return issueIsSubtask;
  }

  public void setIssueIsSubtask(Error issueIsSubtask) {
    this.issueIsSubtask = issueIsSubtask;
  }

  public Errors issuesInArchivedProjects(Error issuesInArchivedProjects) {
    this.issuesInArchivedProjects = issuesInArchivedProjects;
    return this;
  }

   /**
   * Get issuesInArchivedProjects
   * @return issuesInArchivedProjects
  **/
  @ApiModelProperty(value = "")
  public Error getIssuesInArchivedProjects() {
    return issuesInArchivedProjects;
  }

  public void setIssuesInArchivedProjects(Error issuesInArchivedProjects) {
    this.issuesInArchivedProjects = issuesInArchivedProjects;
  }

  public Errors issuesInUnlicensedProjects(Error issuesInUnlicensedProjects) {
    this.issuesInUnlicensedProjects = issuesInUnlicensedProjects;
    return this;
  }

   /**
   * Get issuesInUnlicensedProjects
   * @return issuesInUnlicensedProjects
  **/
  @ApiModelProperty(value = "")
  public Error getIssuesInUnlicensedProjects() {
    return issuesInUnlicensedProjects;
  }

  public void setIssuesInUnlicensedProjects(Error issuesInUnlicensedProjects) {
    this.issuesInUnlicensedProjects = issuesInUnlicensedProjects;
  }

  public Errors issuesNotFound(Error issuesNotFound) {
    this.issuesNotFound = issuesNotFound;
    return this;
  }

   /**
   * Get issuesNotFound
   * @return issuesNotFound
  **/
  @ApiModelProperty(value = "")
  public Error getIssuesNotFound() {
    return issuesNotFound;
  }

  public void setIssuesNotFound(Error issuesNotFound) {
    this.issuesNotFound = issuesNotFound;
  }

  public Errors userDoesNotHavePermission(Error userDoesNotHavePermission) {
    this.userDoesNotHavePermission = userDoesNotHavePermission;
    return this;
  }

   /**
   * Get userDoesNotHavePermission
   * @return userDoesNotHavePermission
  **/
  @ApiModelProperty(value = "")
  public Error getUserDoesNotHavePermission() {
    return userDoesNotHavePermission;
  }

  public void setUserDoesNotHavePermission(Error userDoesNotHavePermission) {
    this.userDoesNotHavePermission = userDoesNotHavePermission;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Errors errors = (Errors) o;
    return Objects.equals(this.issueIsSubtask, errors.issueIsSubtask) &&
        Objects.equals(this.issuesInArchivedProjects, errors.issuesInArchivedProjects) &&
        Objects.equals(this.issuesInUnlicensedProjects, errors.issuesInUnlicensedProjects) &&
        Objects.equals(this.issuesNotFound, errors.issuesNotFound) &&
        Objects.equals(this.userDoesNotHavePermission, errors.userDoesNotHavePermission);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issueIsSubtask, issuesInArchivedProjects, issuesInUnlicensedProjects, issuesNotFound, userDoesNotHavePermission);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Errors {\n");
    
    sb.append("    issueIsSubtask: ").append(toIndentedString(issueIsSubtask)).append("\n");
    sb.append("    issuesInArchivedProjects: ").append(toIndentedString(issuesInArchivedProjects)).append("\n");
    sb.append("    issuesInUnlicensedProjects: ").append(toIndentedString(issuesInUnlicensedProjects)).append("\n");
    sb.append("    issuesNotFound: ").append(toIndentedString(issuesNotFound)).append("\n");
    sb.append("    userDoesNotHavePermission: ").append(toIndentedString(userDoesNotHavePermission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

