/*
 * Copyright Â© 2011 Everit Kft. (http://www.everit.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-636312f2dc6e26921216979d4ae12655beeff255
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.everit.atlassian.restclient.jiracloud.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.everit.atlassian.restclient.jiracloud.v3.model.TargetToSourcesMapping;

/**
 * Issue Bulk Move Payload
 */
@ApiModel(description = "Issue Bulk Move Payload")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T17:15:41.549+02:00[Europe/Prague]")
public class IssueBulkMovePayload {
  @JsonProperty("sendBulkNotification")
  private Boolean sendBulkNotification = true;

  @JsonProperty("targetToSourcesMapping")
  private Map<String, TargetToSourcesMapping> targetToSourcesMapping = new HashMap<>();

  public IssueBulkMovePayload sendBulkNotification(Boolean sendBulkNotification) {
    this.sendBulkNotification = sendBulkNotification;
    return this;
  }

   /**
   * A boolean value that indicates whether to send a bulk change notification when the issues are being moved.  If &#x60;true&#x60;, dispatches a bulk notification email to users about the updates.
   * @return sendBulkNotification
  **/
  @ApiModelProperty(value = "A boolean value that indicates whether to send a bulk change notification when the issues are being moved.  If `true`, dispatches a bulk notification email to users about the updates.")
  public Boolean getSendBulkNotification() {
    return sendBulkNotification;
  }

  public void setSendBulkNotification(Boolean sendBulkNotification) {
    this.sendBulkNotification = sendBulkNotification;
  }

  public IssueBulkMovePayload targetToSourcesMapping(Map<String, TargetToSourcesMapping> targetToSourcesMapping) {
    this.targetToSourcesMapping = targetToSourcesMapping;
    return this;
  }

  public IssueBulkMovePayload putTargetToSourcesMappingItem(String key, TargetToSourcesMapping targetToSourcesMappingItem) {
    if (this.targetToSourcesMapping == null) {
      this.targetToSourcesMapping = new HashMap<>();
    }
    this.targetToSourcesMapping.put(key, targetToSourcesMappingItem);
    return this;
  }

   /**
   * An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.  The key is a string that is created by concatenating the following three entities in order, separated by commas. The format is &#x60;&lt;project ID or key&gt;,&lt;issueType ID&gt;,&lt;parent ID or key&gt;&#x60;. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won&#39;t fail, so the error may be hard to track down.   *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.  *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.  *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask.
   * @return targetToSourcesMapping
  **/
  @ApiModelProperty(value = "An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.  The key is a string that is created by concatenating the following three entities in order, separated by commas. The format is `<project ID or key>,<issueType ID>,<parent ID or key>`. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won't fail, so the error may be hard to track down.   *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.  *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.  *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask.")
  public Map<String, TargetToSourcesMapping> getTargetToSourcesMapping() {
    return targetToSourcesMapping;
  }

  public void setTargetToSourcesMapping(Map<String, TargetToSourcesMapping> targetToSourcesMapping) {
    this.targetToSourcesMapping = targetToSourcesMapping;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueBulkMovePayload issueBulkMovePayload = (IssueBulkMovePayload) o;
    return Objects.equals(this.sendBulkNotification, issueBulkMovePayload.sendBulkNotification) &&
        Objects.equals(this.targetToSourcesMapping, issueBulkMovePayload.targetToSourcesMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sendBulkNotification, targetToSourcesMapping);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueBulkMovePayload {\n");
    
    sb.append("    sendBulkNotification: ").append(toIndentedString(sendBulkNotification)).append("\n");
    sb.append("    targetToSourcesMapping: ").append(toIndentedString(targetToSourcesMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

